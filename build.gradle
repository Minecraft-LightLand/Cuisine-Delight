import net.darkhax.curseforgegradle.TaskPublishCurseForge

buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
        maven { url = 'https://repo.spongepowered.org/repository/maven-public' }
    }
    dependencies {
        classpath "org.spongepowered:mixingradle:${mixingradle_version}"
        classpath 'org.parchmentmc:librarian:1.+'
    }
}

plugins {
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'net.darkhax.curseforgegradle' version '[1.1.24,)'
    id "at.stnwtr.gradle-secrets-plugin" version "1.0.1"
    id "com.modrinth.minotaur" version "2.+"
}

apply plugin: 'maven-publish'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'org.parchmentmc.librarian.forgegradle'

version = "${ll_version}"
group = "dev.kxmc.${modid}"
archivesBaseName = "${modid}"

if (lljij.toBoolean()) jarJar.enable()

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {
    //mappings channel: 'parchment', version: '1.19.3-2023.03.12-1.19.4'
    mappings channel: 'official', version: "${minecraft_version}"
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'info'
            mods {
                "${modid}" {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'info'
            mods {
                "${modid}" {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'info'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', "${modid}", '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                "${modid}" {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

mixin {
    add sourceSets.main, "${modid}.refmap.json"
    config "${modid}.mixins.json"
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "${modid}",
                "Specification-Vendor"    : "xkmc",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "xkmc",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'MixinConfigs'            : "${modid}.mixins.json"
        ])
    }
}

java {
    withSourcesJar()
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

if (lljij.toBoolean()) {

    reobf {
        jarJar {}
    }

    tasks.jarJar.finalizedBy('reobfJarJar')

    tasks.jarJar.configure {
        archiveClassifier.set('')
    }

    jar {
        archiveClassifier.set('slim')
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    compileOnly(annotationProcessor("com.github.llamalad7.mixinextras:mixinextras-common:${mixin_extras_version}"))
    if (rootMod.toBoolean()) {
        implementation(jarJar("com.github.llamalad7.mixinextras:mixinextras-forge:${mixin_extras_version}")) {
            transitive = false
            jarJar.ranged(it, "[${mixin_extras_version},)")
        }
    } else {
        implementation("com.github.llamalad7.mixinextras:mixinextras-forge:${mixin_extras_version}")
    }
    annotationProcessor "org.spongepowered:mixin:${mixin_version}:processor"
    compileOnly fg.deobf("com.tterrag.registrate:Registrate:${registrate_version}")
    if (rootMod.toBoolean()) {
        jarJar(group: 'com.tterrag.registrate', name: 'Registrate', version: "[MC1.20,MC1.21)")
    }
}

repositories {
    flatDir {
        dirs 'libs'
    }
    maven { url 'https://jitpack.io' }
    maven {
        // Location of the maven that hosts JEI files (and TiC)
        name 'Progwml6 maven'
        url 'https://dvs1.progwml6.com/files/maven'
    }
    maven { // Registrate
        url "https://maven.tterrag.com/"
    }
    maven {
        // Location of the maven for vazkii's mods
        name 'blamejared'
        url 'https://maven.blamejared.com'
    }
    maven {
        url 'https://www.cursemaven.com'
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        url = "https://maven.theillusivec4.top/"
    }
}

dependencies {

    implementation fg.deobf(jarJar("dev.xkmc.l2library:l2library:2.4.14-slim")) {
        transitive = false
        jarJar.ranged(it, "[2.4.14,)")
    }

    implementation fg.deobf(jarJar("dev.xkmc.l2serial:l2serial:1.2.0")) {
        transitive = false
        jarJar.ranged(it, "[1.2.0,)")
    }


    implementation fg.deobf("curse.maven:the-twilight-forest-227639:4635921")
    implementation fg.deobf("dev.xkmc.twilightdelight:twilightdelight:2.0.1-slim")

    implementation fg.deobf("curse.maven:farmers-delight-398521:4638874")

    implementation fg.deobf("mezz.jei:jei-${jei_minecraft_version}:${jei_version}")
    implementation fg.deobf("top.theillusivec4.curios:curios-forge:${curios_version}")

    runtimeOnly fg.deobf("curse.maven:badpackets-615134:4438956")
    runtimeOnly fg.deobf("curse.maven:wthit-forge-455982:4596739")
    runtimeOnly fg.deobf("curse.maven:attributefix-280510:4588114")
    runtimeOnly fg.deobf("curse.maven:bookshelf-228525:4581675")
    runtimeOnly fg.deobf("curse.maven:create-328085:4762216")
    runtimeOnly fg.deobf("curse.maven:enchantment-descriptions-250419:4587429")
    runtimeOnly fg.deobf("curse.maven:appleskin-248787:4605078")

    implementation fg.deobf("curse.maven:ends-delight-662675:4643639")
    implementation fg.deobf("curse.maven:nethers-delight-496394:4736227")
    implementation fg.deobf("curse.maven:oceans-delight-841262:4652060")
    implementation fg.deobf("curse.maven:miners-delight-plus-689630:5038950")
    implementation fg.deobf("curse.maven:alexs-delight-556448:5028450")
    implementation fg.deobf("curse.maven:alexs-mobs-426558:5160697")
    implementation fg.deobf("curse.maven:citadel-331936:5143956")
    implementation fg.deobf("curse.maven:epherolib-885449:4889101")
    implementation fg.deobf("curse.maven:croptopia-415438:4997459")


    compileOnly fg.deobf("curse.maven:spice-of-life-carrot-edition-277616:4650707")
    compileOnly fg.deobf("curse.maven:spice-of-life-apple-pie-edition-704584:4596285")
    compileOnly fg.deobf("curse.maven:diet-443570:4634780")



}

tasks.register('publishCurseForge', TaskPublishCurseForge) {
    apiToken = secrets.get("curseforge_token")
    def mainFile = upload(curseforge_project, new File("./build/libs/${modid}-${ll_version}.jar"))
    mainFile.changelog = new File('./changelog.txt')
    mainFile.addEnvironment("Client", "Server")
    mainFile.addGameVersion("1.20.1")
    mainFile.addModLoader("NeoForge","Forge")
    mainFile.addRequirement("farmers-delight")
    mainFile.addOptional(
            "alexs-delight",
            "alexs-mobs",
            "croptopia",
            "ends-delight",
            "miners-delight-plus",
            "nethers-delight",
            "oceans-delight",
            "the-twilight-forest",
            "twilights-flavors-delight")
    mainFile.releaseType = "release"
    disableVersionDetection()
}

modrinth {
    token = secrets.get("modrinth_token")
    projectId = project.modrinth_project
    versionName = "Cuisine Delight ${project.ll_version}"
    versionNumber = project.ll_version
    versionType = "release"
    uploadFile = new File("./build/libs/${modid}-${ll_version}.jar")
    gameVersions = ["1.20.1"]
    loaders = ["forge","neoforge"]
    changelog = new File('./changelog.txt').text.split("\n\n")[0]
    dependencies {
        required.project "farmers-delight"
        optional.project "alexs-mobs"
        optional.project "ends-delight"
        optional.project "miners-delight"
        optional.project "nethers-delight"
        optional.project "oceans-delight"
        optional.project "twilight-delight"
    }
}